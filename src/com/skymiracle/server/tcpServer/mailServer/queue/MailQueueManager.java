package com.skymiracle.server.tcpServer.mailServer.queue;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.skymiracle.auth.Authable;
import com.skymiracle.auth.MailUser;
import com.skymiracle.io.PlainFile;
import com.skymiracle.io.StreamPipe;
import com.skymiracle.io.TextFile;
import com.skymiracle.logger.Logger;
import com.skymiracle.mime.MimeCreater;
import com.skymiracle.queue.QueueManager;
import com.skymiracle.queue.QueueManagerImpl;
import com.skymiracle.server.tcpServer.mailServer.AutoMailMaker;
import com.skymiracle.server.tcpServer.mailServer.Smtp.SmtpServer;
import com.skymiracle.util.CalendarUtil;
import com.skymiracle.util.FileTools;
import com.skymiracle.util.Rfc2047Codec;
import com.skymiracle.util.UUID;

/**
 * 邮件队列服务管理
 */
public class MailQueueManager extends QueueManagerImpl implements QueueManager {
	// 本地投信队列
	private NativeLocalQueue nativeLocalQueue;

	// 本地远程投信队列
	private NativeRemoteQueue nativeRemoteQueue;

	// 外部投信队列
	private ForeignQueue foreignQueue;

	// 对外退信队列
	private BounceToForeignQueue bounceToForeignQueue;

	// 对内退信队列
	private BounceToNativeQueue bounceToNativeQueue;

	// 定时投递队列
	private SimpleTimerMailQueue simpleTimerMailQueue;
	
	// 网络传真队列
	private FaxQueue faxQueue;
	
	// 网络传真中转邮箱
	private String faxEmail;

	private String bounceContentTmpl = new StringBuffer()
			.append(
					"你发往 $MSG_TO$  的 [$MSG_SUBJECT$] 邮件由于以下原因被退回 :\r\n$CONTENT$ \r\n")
			.append("本邮件由系统自动生成，请不要回复!\r\n")
			.append("---------- English Description --------------\r\n")
			.append(
					"I'm sorry to have to inform you that the message returned\r\n")
			.append(
					"A email you sent can not be delivered to receiver. Reason: \r\n$CONTENT$ \r\n")
			.append(
					"This message is generated by WorldPost X email system. Do not reply, please.")
			.toString();

	// SMTP服务器
	private SmtpServer smtpServer;

	// 无退信标记
	private boolean notBounce = false;

	private List<ForeignDelayQueue> foreignDelayQueueList = new ArrayList<ForeignDelayQueue>();

	public MailQueueManager() throws Exception {
		super(7777, "admin", "111111");
	}

	public String getBounceContentTmpl() {
		return this.bounceContentTmpl;
	}

	public void setBounceContentTmpl(String bounceContentTmpl) {
		this.bounceContentTmpl = bounceContentTmpl;
	}

	public SimpleTimerMailQueue getSimpleTimerMailQueue() {
		return this.simpleTimerMailQueue;
	}

	public void setSimpleTimerMailQueue(
			SimpleTimerMailQueue simpleTimerMailQueue) {
		this.simpleTimerMailQueue = simpleTimerMailQueue;
	}

	public BounceToForeignQueue getBounceToForeignQueue() {
		return this.bounceToForeignQueue;
	}

	public BounceToNativeQueue getBounceToNativeQueue() {
		return this.bounceToNativeQueue;
	}

	public ForeignQueue getForeignQueue() {
		return this.foreignQueue;
	}

	public NativeLocalQueue getNativeLocalQueue() {
		return this.nativeLocalQueue;
	}

	public NativeRemoteQueue getNativeRemoteQueue() {
		return this.nativeRemoteQueue;
	}

	public void setForeignDelayQueueList(
			List<ForeignDelayQueue> foreignDelayQueueList) {
		this.foreignDelayQueueList = foreignDelayQueueList;
	}

	public void setSmtpServer(SmtpServer smtpServer) {
		this.smtpServer = smtpServer;
	}

	public SmtpServer getSmtpServer() {
		return this.smtpServer;
	}

	public boolean isNotBounce() {
		return this.notBounce;
	}

	public void setNotBounce(boolean notBounce) {
		this.notBounce = notBounce;
	}

	public List<ForeignDelayQueue> getForeignDelayQueueList() {
		return this.foreignDelayQueueList;
	}

	// ------- add queue mail

	public void addNativeLocalMessage(MailMessage mailMessage) throws Exception {
		Logger.info("Add Message to Native Local Queue to "
				+ mailMessage.getToStr() + " id="
				+ mailMessage.getMissionUUID());
		this.nativeLocalQueue.add(mailMessage);
	}

	public void addNativeRemoteMessage(MailMessage mailMessage)
			throws Exception {
		Logger.info("Add Message to Native Remote Queue to "
				+ mailMessage.getToStr() + " id="
				+ mailMessage.getMissionUUID());
		this.nativeRemoteQueue.add(mailMessage);
	}

	public void addForeignMessage(MailMessage mailMessage) throws Exception {
		Logger.info("Add Message to Foreign Queue to " + mailMessage.getToStr()
				+ " id=" + mailMessage.getMissionUUID());
		this.foreignQueue.add(mailMessage);
	}

	public void addForeignDelayQueue(ForeignDelayQueue foreignDelayQueue) {
		this.foreignDelayQueueList.add(foreignDelayQueue);
		addServer(foreignDelayQueue);
	}

	public boolean addNextForeignDelayQueue(MailMessage mm) throws Exception {

		int nextLevel = mm.getDelayLevel();
		nextLevel++;
		if (nextLevel > this.foreignDelayQueueList.size())
			return false;
		mm.setDelayLevel(nextLevel);
		// mm.setGenTime(System.currentTimeMillis());
		((this.foreignDelayQueueList.get(nextLevel - 1))).add(mm);
		return true;
	}
	
	private void addFaxMessage(MailMessage mm)  throws Exception {
		Logger.info("Add Message to Fax Queue from " + mm.getFromUsername() + "@" + mm.getFromDomain()
				+ " id=" + mm.getMissionUUID());
		this.faxQueue.add(mm);
	}

	// ------- set queue

	public void setBounceToForeignQueue(
			BounceToForeignQueue bounceToForeignQueue) {
		this.bounceToForeignQueue = bounceToForeignQueue;
		this.bounceToForeignQueue.setMailQueueManager(this);
		addServer(this.bounceToForeignQueue);
	}

	public void setBounceToNativeQueue(BounceToNativeQueue bounceToNativeQueue) {
		this.bounceToNativeQueue = bounceToNativeQueue;
		this.bounceToNativeQueue.setMailQueueManager(this);
		addServer(this.bounceToNativeQueue);
	}

	public void setForeignQueue(ForeignQueue foreignQueue) {
		this.foreignQueue = foreignQueue;
		this.foreignQueue.setMailQueueManager(this);
		addServer(this.foreignQueue);
	}

	public void setNativeLocalQueue(NativeLocalQueue nativeLocalQueue) {
		this.nativeLocalQueue = nativeLocalQueue;
		this.nativeLocalQueue.setMailQueueManager(this);
		addServer(this.nativeLocalQueue);
	}

	public void setNativeRemoteQueue(NativeRemoteQueue nativeRemoteQueue) {
		this.nativeRemoteQueue = nativeRemoteQueue;
		this.nativeRemoteQueue.setMailQueueManager(this);
		addServer(this.nativeRemoteQueue);
	}

	public void setTimerMailQueue(SimpleTimerMailQueue simpleTimerMailQueue) {
		this.simpleTimerMailQueue = simpleTimerMailQueue;
		this.simpleTimerMailQueue.setMailQueueManager(this);
		addServer(this.simpleTimerMailQueue);
	}
	
	

	public void setFaxQueue(FaxQueue faxQueue) {
		this.faxQueue = faxQueue;
		this.faxEmail = this.faxQueue.getFaxConfig().getRelayEmail();
		this.faxQueue.setMailQueueManager(this);
		addServer(this.faxQueue);
	}

	public void setFaxEmail(String faxEmail) {
		this.faxEmail = faxEmail;
	}

	// ------foreign delay


	public void putInBounceQueue(MailMessage mailMessage, String reason)
			throws Exception {
		if (this.notBounce) {
			Logger.debug("The MailQueueManager is set noBounce=true");
			return;
		}
		if(mailMessage == null) {
			Logger.debug("Bounce MailMessage Is Null");
			return;
		}
		
		String fromUserName = mailMessage.getFromUsername();
		if (fromUserName == null || fromUserName.equals("")) {
			mailMessage = null;
			Logger.debug("Bounce Target Is Empty");
			return;
		}

		MailUser mailUser = getMailUser(mailMessage.getFromUsername(),
				mailMessage.getFromDomain());
		String location = mailUser.getStorageLocation();
		String username = mailUser.getUid();
		String domain = mailUser.getDc();

		if (location.equals(Authable.LOCATION_EXCEPTION)) {
			mailMessage = null;
			Logger
					.debug("MailQueueManager.putInBounceQueue(). bounce Target is Authable.LOCATION_EXCEPTION. username="
							+ username + " domain=" + domain);
			return;
		} else {
			/*
			 * String fromUsername = "postmaster"; String fromDomain =
			 * getSmtpServer().getDefaultDomain(); List<String> dataLineList =
			 * new ArrayList<String>(); String to = username + '@' + domain;
			 * String content = this.bounceContentTmpl.replace("$FROM$",
			 * "postmaster@" + domain).replace("$CONTENT$", reason)
			 * .replace("$TO$", to).replace("$DATE$", new
			 * Date().toString()).replace("$MSG_TO$", mailMessage.getToStr());
			 */
		
			
			String queueTempPath = "/tmp/Queue_" + new UUID().toShortString();
			File attachFile = new File(queueTempPath);
			StringBuffer sb = new StringBuffer();
			List<String> ll = mailMessage.getDataLineList();
			for(String l:ll){
				sb.append(l).append("\r\n");
			}
			StreamPipe.stringToFile(sb.toString(), attachFile, "UTF-8");
			
			//新建一封邮件
			MimeCreater mc = new MimeCreater();
			String subject ="系统退信";
			String fromUsername = "postmaster";
			String fromDomain = getSmtpServer().getDefaultDomain();
			String sender = "postmaster@"+domain;
			String toEmail = username + '@' + domain;
			mc.setFrom("postmaster", sender);
			mc.setTos(new String[]{toEmail});
			mc.setSubject(subject);
			String bounceEml = TextFile.loadString("/wpx/timermail/bounce.eml", "\r\n");
			String content = bounceEml
				.replace("$FROM$", "\"postmaster\" <" + sender + ">")
				.replace("$TO$", mailMessage.getToStr()).replace("$MSG_TO$",mailMessage.getToStr())
				.replace("$SUBJECT$", subject)
				.replace("$CONTENT$", reason)
				.replace("$DATE$", CalendarUtil.getLocalDateTime("yyyy-MM-dd HH:mm"));
			mc.setContent(content);
			mc.addAttachment(attachFile.getPath(), "原邮件.eml", "原邮件.eml");
			
			String tempPath = "/tmp/Bounce_" + new UUID().toShortString();
			File mimeTempFile = new File(tempPath);
			mc.saveToFile(mimeTempFile.getAbsolutePath());
			
			List<String> dataLines = new ArrayList<String>();
			dataLines = PlainFile.readLines(mimeTempFile, "UTF-8");;
			mimeTempFile.delete();
			
			
			mailMessage = null;

			MailMessage mm = new MailMessage(fromUsername, fromDomain, toEmail,
					location, dataLines, new UUID().toShortString());
			if (location.equals(Authable.LOCATION_FOREIGN)) {
				this.bounceToForeignQueue.add(mm);
			} else {
				this.bounceToNativeQueue.add(mm);
			}
			
			attachFile.delete();
		}
	}

	public void putMailtoTimerQueue(String fromUsername, String fromDomain,
			String fromLocation, String toStrs, List<String> dataLineList,
			long beginTime, String missionUUID) {
		MailMessage m = new MailMessage(fromUsername, fromDomain, toStrs,
				fromLocation, dataLineList, missionUUID);
		this.simpleTimerMailQueue.add(m, beginTime);

	}

	public void putMailtoQueue(String fromusername, String fromdomain,
			String toStrs, List<String> dataList, String missionUUID)
			throws Exception {
		String[] toStr = toStrs.split(",");
		ArrayList<MailUser> mailUserList = new ArrayList<MailUser>();
		for (int i = 0; i < toStr.length; i++) {
			int pos = toStr[i].indexOf("@");
			if (pos == -1)
				continue;
			mailUserList.add(getMailUser(toStr[i].substring(0, pos), toStr[i]
					.substring(pos + 1)));
		}
		this.putMailtoQueue(fromusername, fromdomain, mailUserList, dataList,
				missionUUID);
	}

	public void putMailtoQueue(String fromUsername, String fromDomain,
			List<MailUser> mailTargetList, List<String> dataLineList,
			String missionUUID) throws InstantiationException,
			IllegalAccessException {

		// 内网本地用户
		StringBuffer nativeLocationTosSb = new StringBuffer();
		// 内网远程用户
		Map<String, StringBuffer> nativeRemoteTosMap = new HashMap<String, StringBuffer>();
		// 外网用户
		List<String> foreignToList = new ArrayList<String>();
		
		// 网络传真
		boolean isToFax = false;

		for (MailUser mailUser : mailTargetList) {
			String userEmail = mailUser.getUid() + '@' + mailUser.getDc();
			String localtion = mailUser.getStorageLocation();
			
			// 网络传真队列
			if(faxEmail != null && faxEmail.equals(userEmail)) {
				isToFax = true;
				continue;
			}

			if (localtion.equals(Authable.LOCATION_FOREIGN)) {
				foreignToList.add(userEmail);
				continue;
			} 
			
			// getForward Info --->0: not forward, 1: forward not save, 2: forward and save
			// 查看这个用户的转发情况
			int forward = mailUser.getForward();
			if (forward != MailUser.FORWARD_YES_NOSAVE) {
				// put message to Notive queue
				if (localtion.equals(Authable.LOCATION_NATIVE_LOCAL)) {
					nativeLocationTosSb.append(mailUser.getUid()).append(
							'@').append(mailUser.getDc()).append('|');
				} else if (localtion.equals(Authable.LOCATION_GROUP)) {
					Logger.info("Add a Group mail to queue ");
					//XXX: 这里有一个暂时的省略：所有的组邮件的用户的storageLocation都为'local'
					List<MailUser<?>> grpMembers = this.smtpServer.getAuthMail().getGrpMembers(mailUser);
					for(MailUser user: grpMembers) {
						nativeLocationTosSb.append(user.getUid()).append(
								'@').append(user.getDc()).append('|');
					}
				}else {
					// 对内网远程IP分组
					StringBuffer sb = nativeRemoteTosMap.get(localtion);
					if (sb == null) {
						sb = new StringBuffer(mailUser.getUid() + '@'
								+ mailUser.getDc());
						nativeRemoteTosMap.put(localtion, sb);
					} else {
						sb.append("|").append(
								userEmail);
					}
				}
			}

			if (forward == MailUser.FORWARD_NO) {
				continue;
			}
			
			String[] forwardAddrs = mailUser.getForwardaddr();
			if (forwardAddrs.length == 0)
				continue;

			List<String> srcHeaderList = AutoMailMaker
					.getMailHeaderList(dataLineList);
			int bodyBegin = AutoMailMaker
					.getMailBodyBeginInList(dataLineList);

			for (int j = 0; j < forwardAddrs.length; j++) {
				int pos = forwardAddrs[j].indexOf("@");
				if (pos == -1)
					continue;
				String forwarduser = forwardAddrs[j].substring(0, pos);
				String forwarddomain = forwardAddrs[j].substring(pos + 1);

				MailUser forwardMailUser = null;
				try {

					forwardMailUser = getMailUser(forwarduser,
							forwarddomain);
				} catch (Exception e) {
					continue;
				}

				if (forwardMailUser.getStorageLocation().equals(
						Authable.LOCATION_EXCEPTION)) {
					// 转发给forwardMailUser时不成功
					continue;
				}	

				List<String> newForwardHeader = AutoMailMaker
						.getForwardHeaderList(srcHeaderList,
								forwardAddrs[j], fromUsername + "@"
										+ fromDomain, forwardMailUser
										.getUid()
										+ "@" + forwardMailUser.getDc());
				if (newForwardHeader == null)
					continue;
				newForwardHeader.add("");
				newForwardHeader.addAll(dataLineList.subList(bodyBegin,
						dataLineList.size()));
				List<MailUser> forwardAttrOfMailList = new ArrayList<MailUser>();
				forwardAttrOfMailList.add(forwardMailUser);
				this.putMailtoQueue(mailUser.getUid(), mailUser.getDc(),
						forwardAttrOfMailList, new ArrayList<String>(
								newForwardHeader), new UUID()
								.toShortString());
			}
		}

		try {
			if (nativeLocationTosSb.length() != 0) {
				MailMessage mm = new MailMessage(fromUsername, fromDomain,
						nativeLocationTosSb.toString(),
						Authable.LOCATION_NATIVE_LOCAL, dataLineList,
						missionUUID);
				this.addNativeLocalMessage(mm);
			}
		} catch (Exception e) {
			Logger.error("SmtpServer.putMailToQueue.NativeLocal", e);
		}	
		try {
			for (String to : foreignToList) {
				MailMessage mm = new MailMessage(fromUsername, fromDomain, to,
						Authable.LOCATION_FOREIGN, dataLineList, missionUUID);
				this.addForeignMessage(mm);
			}
		} catch (Exception e) {
			Logger.error("SmtpServer.putMailToQueue.Foreign", e);
		}	
		try {
			for (Map.Entry<String, StringBuffer> entry : nativeRemoteTosMap
					.entrySet()) {
				String location = entry.getKey();
				String tos = entry.getValue().toString();
				MailMessage mm = new MailMessage(fromUsername, fromDomain, tos,
						location, dataLineList, missionUUID);
				this.addNativeRemoteMessage(mm);
			}
		} catch (Exception e) {
			Logger.error("SmtpServer.putMailToQueue.NativeRemote", e);
		}	
		
		try {
			if(isToFax) {
				MailMessage mm = new MailMessage(fromUsername, fromDomain, faxEmail,
						Authable.LOCATION_FOREIGN, dataLineList, missionUUID);
				this.addFaxMessage(mm);
			}
		} catch (Exception e) {
			Logger.error("SmtpServer.putMailToQueue.Foreign", e);
		}
		
	}

	public MailUser<?> getMailUser(String username, String domain)
			throws Exception {
		return getSmtpServer().getMailUser(username, domain);
	}

}
